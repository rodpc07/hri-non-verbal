<?xml version="1.0"?>
<launch>

    <node pkg="tf" type="static_transform_publisher" name="light_middle" args="1 0 1 0 1.3089 0  world light_middle 10" />
    <node pkg="tf" type="static_transform_publisher" name="light_left" args="1 -1 1 0 0 0.7854  world light_left 10" />
    <node pkg="tf" type="static_transform_publisher" name="light_right" args="1 1 1 0 0 -0.7854  world light_right 10" />
  


    <!-- <group ns="front_camera">
    <node pkg="tf" type="static_transform_publisher" name="camera_broadcaster" args="1.75 0 0.7 1.5707 0 -1.9198  world front_camera 10" />
    <node name="camera_info" pkg="rostopic" type="rostopic"
      args="pub camera_info sensor_msgs/CameraInfo
     '{header: {seq: 0, stamp: {secs: 0, nsecs: 0}, frame_id: 'front_camera'},
      height: 1440, width: 2560, distortion_model: 'plumb_bob',
      D: [0.0, 0.0, 0.0, 0.0, 0.0],
      K: [1600.0, 0.0, 1280, 0.0, 1600.0, 720, 0.0, 0.0, 1.0],
      R: [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
      P: [1600.0, 0.0, 1280, 0.0, 0.0, 1600, 720, 0.0, 0.0, 0.0, 1.0, 0.0],
      binning_x: 0, binning_y: 0,
      roi: {x_offset: 0, y_offset: 0, height: 1440, width: 2560, do_rectify: false}}' -r 30"
      output="screen"/>
    </group>

    <group ns="left_camera">
    <node pkg="tf" type="static_transform_publisher" name="camera_broadcaster" args="1.25 -1.25 0.35 0.7854 0 -1.7453  world left_camera 10" />
    <node name="camera_info" pkg="rostopic" type="rostopic"
      args="pub camera_info sensor_msgs/CameraInfo
     '{header: {seq: 0, stamp: {secs: 0, nsecs: 0}, frame_id: 'left_camera'},
      height: 1440, width: 2560, distortion_model: 'plumb_bob',
      D: [0.0, 0.0, 0.0, 0.0, 0.0],
      K: [1600.0, 0.0, 1280, 0.0, 1600.0, 720, 0.0, 0.0, 1.0],
      R: [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
      P: [1600.0, 0.0, 1280, 0.0, 0.0, 1600, 720, 0.0, 0.0, 0.0, 1.0, 0.0],
      binning_x: 0, binning_y: 0,
      roi: {x_offset: 0, y_offset: 0, height: 1440, width: 2560, do_rectify: false}}' -r 30"
      output="screen"/>
    </group>

    <group ns="right_camera">
    <node pkg="tf" type="static_transform_publisher" name="camera_broadcaster" args="1.25 1.25 0.35 2.3562 0 -1.7453  world right_camera 10" />
    <node name="camera_info" pkg="rostopic" type="rostopic"
      args="pub camera_info sensor_msgs/CameraInfo
     '{header: {seq: 0, stamp: {secs: 0, nsecs: 0}, frame_id: 'right_camera'},
      height: 1440, width: 2560, distortion_model: 'plumb_bob',
      D: [0.0, 0.0, 0.0, 0.0, 0.0],
      K: [1600.0, 0.0, 1280, 0.0, 1600.0, 720, 0.0, 0.0, 1.0],
      R: [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
      P: [1600.0, 0.0, 1280, 0.0, 0.0, 1600, 720, 0.0, 0.0, 0.0, 1.0, 0.0],
      binning_x: 0, binning_y: 0,
      roi: {x_offset: 0, y_offset: 0, height: 1440, width: 2560, do_rectify: false}}' -r 30"
      output="screen"/>
    </group>

    <group ns="/front_camera/image">
    <rosparam param="disable_pub_plugins">
        - 'image_transport/compressed'
        - 'image_transport/compressedDepth'
        - 'image_transport/theora'
    </rosparam>
    </group>

    <group ns="/left_camera/image">
    <rosparam param="disable_pub_plugins">
        - 'image_transport/compressed'
        - 'image_transport/compressedDepth'
        - 'image_transport/theora'
    </rosparam>
    </group>

    <group ns="/right_camera/image">
    <rosparam param="disable_pub_plugins">
        - 'image_transport/compressed'
        - 'image_transport/compressedDepth'
        - 'image_transport/theora'
    </rosparam>
    </group> -->


    <!-- specify the planning pipeline -->
  <arg name="pipeline" default="ompl" />

  <!-- By default, we do not start a database (it can be large) -->
  <arg name="db" default="false" />
  <!-- Allow user to specify database location -->
  <arg name="db_path" default="$(find yumi_moveit_config)/default_warehouse_mongo_db" />

  <!-- By default, we are not in debug mode -->
  <arg name="debug" default="false" />

  <!-- By default, we will load or override the robot_description -->
  <arg name="load_robot_description" default="true"/>

  <!-- Choose controller manager: fake, simple, or ros_control -->
  <arg name="moveit_controller_manager" default="fake" />
  <!-- Set execution mode for fake execution controllers -->
  <arg name="fake_execution_type" default="interpolate" />

  <!-- By default, hide joint_state_publisher's GUI in 'fake' controller_manager mode -->
  <arg name="use_gui" default="false" />
  <arg name="use_rviz" default="true" />

  <!-- If needed, broadcast static tf for robot root -->
  <!-- <node pkg="tf2_ros" type="static_transform_publisher" name="virtual_joint_broadcaster_0" args="0 0 0 0 0 0 world yumi_base_link" /> -->

  <group if="$(eval arg('moveit_controller_manager') == 'fake')">
    <!-- We do not have a real robot connected, so publish fake joint states via a joint_state_publisher
         MoveIt's fake controller's joint states are considered via the 'source_list' parameter -->
    <!-- <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" unless="$(arg use_gui)">
      <rosparam param="source_list">[move_group/fake_controller_joint_states]</rosparam>
      <param name="rate" value="15"/>
    </node> -->
    <!-- If desired, a GUI version is available allowing to move the simulated robot around manually
         This corresponds to moving around the real robot without the use of MoveIt. -->
    <!-- <node name="joint_state_publisher" pkg="joint_state_publisher_gui" type="joint_state_publisher_gui" if="$(arg use_gui)">
      <rosparam param="source_list">[move_group/fake_controller_joint_states]</rosparam>
    </node> -->

    <!-- Given the published joint states, publish tf for the robot links -->
    <!-- <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" /> -->
  </group>

  <!-- Run the main MoveIt executable without trajectory execution (we do not have controllers configured by default) -->
  <include file="$(find yumi_moveit_config)/launch/move_group.launch">
    <arg name="allow_trajectory_execution" value="true"/>
    <arg name="moveit_controller_manager" value="$(arg moveit_controller_manager)" />
    <arg name="fake_execution_type" value="$(arg fake_execution_type)"/>
    <arg name="info" value="true"/>
    <arg name="debug" value="$(arg debug)"/>
    <arg name="pipeline" value="$(arg pipeline)"/>
    <arg name="load_robot_description" value="$(arg load_robot_description)"/>
  </include>

  <!-- Run Rviz and load the default config to see the state of the move_group node -->
  <include file="$(find yumi_moveit_config)/launch/moveit_rviz.launch" if="$(arg use_rviz)">
    <arg name="rviz_config" value="$(dirname)/new_record.rviz"/>
    <arg name="debug" value="$(arg debug)"/>
  </include>

  <!-- If database loading was enabled, start mongodb as well -->
  <include file="$(find yumi_moveit_config)/launch/default_warehouse_db.launch" if="$(arg db)">
    <arg name="moveit_warehouse_database_path" value="$(arg db_path)"/>
  </include>

</launch>

